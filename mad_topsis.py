# -*- coding: utf-8 -*-
"""mad_topsis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uu_QtzAnNP1CF-Nt6hLbaI-VGoVoJDuC
"""

import pandas as pd
import numpy as np
data=pd.read_excel('/dane_uczelni_kasia.xlsx')
data.head(5)

data = data.drop(data.columns[-1], axis=1)

data.head(5)

def topsis_analysis(data):

    # Normalizacja danych dla każdej kolumny
    normalized = data.apply(lambda x: x / np.sqrt((x ** 2).sum()))


    # Idealne i antyidealne rozwiązanie
    ideal_best = pd.DataFrame([np.append(np.min(normalized.iloc[:, :2]), np.max(normalized.iloc[:, 2:]))])
    ideal_worst = pd.DataFrame([np.append(np.max(normalized.iloc[:, :2]), np.min(normalized.iloc[:, 2:]))])

    # Odległość do idealnego i antyidealnego rozwiązania
    distance_best = np.sqrt(((normalized - ideal_best) ** 2).sum(axis=1))
    distance_worst = np.sqrt(((normalized - ideal_worst) ** 2).sum(axis=1))

    # Wartość TOPSIS
    topsis_score = distance_worst / (distance_worst + distance_best)

    return topsis_score

data2=data.drop(data.columns[0:3], axis=1)
data2=data2.drop(0)
data2=data2.drop(139)
data2=data2.drop(140)
data2=data2.drop(141)
data2=data2.drop(142)

normalized = data2.apply(lambda x: x / np.sqrt((x ** 2).sum()))


normalized.tail(10)